////////////////////////////////////////////////////////////////////////////////
// Filename: light.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	//float4 diffuseColor;
    float3 lightDirection;
    float specularPower;
    float4 specularColor;
};

cbuffer LightColorBuffer 
{ 
	float4 diffuseColor[4]; 
};


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	//float3 viewDirection : TEXCOORD1;

	float3 lightPos1 : TEXCOORD1; 
	float3 lightPos2 : TEXCOORD2; 
	float3 lightPos3 : TEXCOORD3; 
	float3 lightPos4 : TEXCOORD4;

};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	//float3 lightDir;
	//float lightIntensity;
	float lightIntensity1, lightIntensity2, lightIntensity3, lightIntensity4; 
	float4 color, color1, color2, color3, color4;
    float4 specular;

	/*
	//  직사광선
	// Set the default output color to the ambient light value for all pixels.
    color = ambientColor;
	
	// Initialize the specular color.
	specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

	// Invert the light direction for calculations.
    lightDir = -lightDirection;

    // Calculate the amount of light on this pixel.
    lightIntensity = saturate(dot(input.normal, lightDir));

	// Add the diffuse color to the ambient color only when the N dot L is greater than zero. 
	// If the diffuse color is negative, it will subtract away some of the ambient color in the addition.
	if(lightIntensity > 0.0f)
    {
        // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
        color += (diffuseColor * lightIntensity);

	    // Saturate the ambient and diffuse color.
		color = saturate(color);

		// Calculate the reflection vector based on the light intensity, normal vector, and light direction.
        reflection = normalize(2 * lightIntensity * input.normal - lightDir); 

		// Determine the amount of specular light based on the reflection vector, viewing direction, and specular power.
        specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);
    }

    // Multiply the texture pixel and the input color to get the textured result.
    color = color * textureColor;

	// Add the specular component last to the output color.
    color = saturate(color + specular);
	//직사광선 끝
	*/

	//  포인트라이트
	// Calculate the different amounts of light on this pixel based on the positions of the lights. 
	lightIntensity1 = saturate(dot(input.normal, input.lightPos1)); 
	lightIntensity2 = saturate(dot(input.normal, input.lightPos2)); 
	lightIntensity3 = saturate(dot(input.normal, input.lightPos3)); 
	lightIntensity4 = saturate(dot(input.normal, input.lightPos4));

	// Determine the diffuse color amount of each of the four lights. 
	color1 = diffuseColor[0] * lightIntensity1; 
	color2 = diffuseColor[1] * lightIntensity2; 
	color3 = diffuseColor[2] * lightIntensity3; 
	color4 = diffuseColor[3] * lightIntensity4;
	

	// Sample the pixel color from the texture using the sampler at this texture coordinate location.
	textureColor = shaderTexture.Sample(SampleType, input.tex);

	// Multiply the texture pixel by the combination of all four light colors to get the final result. 
	color = saturate(color1 + color2 + color3 + color4) * textureColor;

    return color;
}